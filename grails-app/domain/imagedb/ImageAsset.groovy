package imagedb

/**
 * ImageAsset is the domain model for an image in the system.
 * The original data will be stored in a folder structure matching the assets dateCreated date: {storage}/originals/{yyyy}/{MM}/{dd}/{name}
 * Versions generated by the system will be stored in: {storage}/generated/{yyyy}/{MM}/{dd}/{name}/{pixelWidth}x{pixelHeight}.jpg
 */

class ImageAsset {

    Author author

    String filename

    String heading
    String description

    String place
    String city
    String country
    BigDecimal latitude
    BigDecimal longitude

    Long fileSize = 0
    Integer pixelWidth = 0
    Integer pixelHeight = 0

    Date dateTimeOriginal
    TimeZone timeZoneOriginal

    Boolean enabled = true
    Date dateCreated

    //Set<Tag> tags

    //static hasMany = [ tags:Tag ]

    static constraints = {
        filename blank: false
        heading nullable: true
        description nullable: true
        place nullable: true
        city nullable: true
        country nullable: true
        latitude nullable: true
        longitude nullable: true
        pixelHeight nullable: true
        pixelWidth nullable: true
        dateTimeOriginal nullable: true
        timeZoneOriginal nullable: true
    }

    static mapping = {
        description type: 'text'
    }

    //static transients = [ 'tags' ] //, 'metadata']

    static searchable = {
        // Elastic searchTest cannot index timezone objects
        only = [
                'filename',
                'heading',
                'description',
           //     'tags',
          //      'metadata'
        ]
        //metadata component: true
        //tags component: true
    }

    Set<Tag> getTags() {
        ImageAsset_Tag.findAllByImage(this)
            .collect { it.tag } as Set
    }

    /*
    void setTags(Set<Tag> tags) {
        throw new Exception("setTags was called")
    }
    */

    Set<Metadata> getMetadata() {
        Metadata.findAllByImage(this) as Set
    }

    Set<ImageCollection> getImageCollections() {
        ImageAsset_ImageCollection.findAllByImage(this)
            .collect { it.imageCollection } as Set
    }
}
